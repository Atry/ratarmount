name: Tests

on: [push, pull_request]

jobs:
  Static-Code-Checks:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install pip Dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --user fusepy

    - name: Style Check With Black
      run: |
        python3 -m pip install black
        black -q --diff --line-length 120 --skip-string-normalization ratarmount.py tests/*.py core/ratarmountcore/*.py > black.diff
        if [ -s black.diff ]; then
            cat black.diff
            exit 123
        fi

    - name: Lint With Flake8
      run: |
        python3 -m pip install flake8
        flake8 *.py tests/*.py core/ratarmountcore/[^_]*.py

    - name: Lint With Pylint
      run: |
        python3 -m pip install pylint
        pylint *.py tests/*.py core/ratarmountcore/*.py | tee pylint.log
        ! 'egrep' ': E[0-9]{4}: ' pylint.log

    - name: Lint With Pytype
      run: |
        python3 -m pip install pytype
        pytype -d import-error -P$( cd core && pwd ):$( pwd ) ratarmount.py core/ratarmountcore/*.py

    - name: Lint With Mypy
      run: |
        yes | python3 -m pip install --upgrade-strategy eager --upgrade types-dataclasses mypy
        mypy *.py core/ratarmountcore/*.py
        yes | python3 -m pip uninstall types-dataclasses

    - name: Lint With ShellCheck
      run: |
        sudo apt-get -y install shellcheck
        shellcheck -e SC2064 tests/*.sh

  Tests:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-10.15, ubuntu-latest]
        # ToDo: Add windows-latest but it requires a lot of setup of the dependencies!
        #       Maybe only test ratarmount-core without most dependencies after I have split that off.
        # Oldest and newest versions should be enough. Python versions are supported 5 years from release date.
        # 3.5 was released 2015-09-13 and end-of-life was 2020-09-13
        # 3.6 was released 2016-12-23 and end-of-life will be 2021-12-23
        # 3.7 was released 2018-06-27 and end-of-life will be 2023-06-27
        # 3.8 was released 2019-10-14 and end-of-life will be 2024-10-14
        # 3.9 was released 2020-10-05 and end-of-life will be 2025-10-25
        # 3.10 is to be released 2021-10-25
        python-version: [3.6, 3.9]

    defaults:
      run:
        # This is especially important for windows because it seems to default to powershell
        shell: bash

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Print System Information
      run: |
        echo "uname -a: $( uname -a )"
        echo "Shell: $SHELL"
        echo "Mount points:"; mount

    - uses: msys2/setup-msys2@v2
      if: startsWith( matrix.os, 'windows' )
      with:
        install: gcc make liblzma-devel libzstd-devel zlib-devel

    - name: Install Dependencies (Linux)
      if: startsWith( matrix.os, 'ubuntu' )
      run: |
        sudo apt-get -y install fuse bzip2 pbzip2 pixz zstd unar
        set -x

    - name: Install Dependencies (MacOS)
      if: startsWith( matrix.os, 'macos' )
      run: |
        # coreutils is required for the tests written in shell, e.g., for the 'realpath' command
        brew install macfuse coreutils pixz pbzip2 zstd
        # Add brew installation binary folder to PATH so that command line tools like zstd can be found
        export PATH="$PATH:/usr/local/bin"

    - name: Install pip Dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade wheel
        python3 -m pip install --upgrade setuptools
        python3 -m pip install --upgrade-strategy eager --upgrade cython twine build zstandard fusepy

    - name: Test Startup With Only One Compression Dependency
      run: |
        for module in indexed_gzip indexed_zstd lzmaffi python-xz; do
          python3 -m pip install --upgrade "$module"
          # Segfaults (139) are not allowed but other exit codes are valid!
          # indexed_zstd=1.2.0 did segfault here!
          python3 ratarmount.py README.md || [ $? != 139 ]
          python3 -m pip uninstall --yes "$module"
        done
        python3 -m pip install --upgrade git+https://github.com/mxmlnkn/indexed_bzip2.git@master#egginfo=indexed_bzip2

    - name: Test ratarmountcore Installation From Tarball
      working-directory: core
      run: |
        python3 -m build
        twine check dist/*
        python3 -m pip install "$( find dist -name '*.tar.gz' | head -1 )"[full]

    - name: Test Installation From Tarball
      run: |
        python3 -m build
        twine check dist/*
        python3 -m pip install "$( find dist -name '*.tar.gz' | head -1 )"[full]

    - name: Test Installation From Source
      run: |
        python3 -m pip install .[full]

    - name: Test Simple Startup
      run: |
        ratarmount --help
        ratarmount --version

    - name: Test Simple Mount
      run: |
        ratarmount tests/single-file.tar mimi
        ls -la mimi
        sleep 1s
        # MacOS does not have fusermount!
        ratarmount -u mimi

    - name: Test Startup Without Compression Dependencies
      run: |
        # Segfaults (139) are not allowed but other exit codes are valid!
        python3 ratarmount.py tests/simple.bz2 || [ $? != 139 ]

    - name: Unit Tests
      run: |
        python3 -m pip install pytest
        for file in core/tests/test_*.py; do
            pytest "$file"
        done

    - name: Regression Tests
      run: |
        python3 tests/tests.py
        bash tests/runtests.sh

    - name: Module tests without fusepy
      run: |
        python3 -m pip uninstall -y fusepy
        python3 tests/tests.py


  Legacy-Tests:
    # For some reason, it cannot install python-3.9-dev anymore.
    # I changed nothing, so some version or repo might have changed!
    if: false
    runs-on: ubuntu-latest
    container: ubuntu:16.04
    steps:
    - uses: actions/checkout@v2

    - name: Print System Information
      run: |
        echo "uname -a: $( uname -a )"
        cat /etc/issue
        echo "Shell: $SHELL"
        echo "Mount points:"; mount

    - name: Install Dependencies (Linux)
      run: |
        apt-get update
        apt-get -y install software-properties-common
        add-apt-repository ppa:deadsnakes/ppa
        apt-get update
        apt-get remove python3-pip
        apt-get -y install python3.9 python3.9-dev python3.9-distutils python3.9-venv
        apt-get -y install fuse bzip2 pbzip2 pixz zstd unar curl
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python3.9 get-pip.py
        rm get-pip.py
        ln -sf /usr/bin/python3.9 /usr/bin/python3
        which python3
        python3 --version
        pip -V
        python3 -m pip -V

    - name: Install pip Dependencies
      run: |
        python3.9 -m pip install --no-cache-dir --upgrade pip
        python3.9 -m pip install --no-cache-dir --upgrade wheel
        python3.9 -m pip install --no-cache-dir --upgrade setuptools
        python3.9 -m pip install --no-cache-dir --upgrade-strategy eager --upgrade cython twine build zstandard

    - name: Test ratarmountcore Installation From Tarball
      working-directory: core
      run: |
        python3.9 -m build
        twine check dist/*
        python3.9 -m pip install "$( find dist -name '*.tar.gz' | head -1 )"[full]

    - name: Test Installation From Tarball
      run: |
        python3.9 -m build
        twine check dist/*
        python3.9 -m pip install "$( find dist -name '*.tar.gz' | head -1 )"[full]

    - name: Test Simple Startup
      run: |
        ratarmount --help
        ratarmount --version

    - name: Unit Tests
      run: |
        python3.9 -m pip install pytest
        for file in core/tests/test_*.py; do
            pytest "$file"
        done


  Manylinux-Appimage:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    env:
      appbase: ratarmount-manylinux2014_x86_64
      appdir: ratarmount-manylinux2014_x86_64.AppDir
    steps:
    - uses: actions/checkout@v2

    - name: Print System Information
      run: |
        echo "uname -a: $( uname -a )"
        cat /etc/issue
        echo "Shell: $SHELL"
        echo "Mount points:"; mount

    - name: Install System Build Tools
      run: |
        ln -s /opt/python/cp39-cp39/bin/python3 /usr/local/bin/python3
        export PATH="/opt/python/cp39-cp39/bin:$PATH"
        python3 -m pip install python-appimage
        yum install -y fuse fakeroot patchelf fuse-libs libsqlite3x strace desktop-file-utils

    - name: Install AppImage Tooling
      run: |
        curl -L -o /usr/bin/appimagetool 'https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage'
        chmod u+x /usr/bin/appimagetool
        curl -L -o /usr/bin/linuxdeploy 'https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage'
        chmod u+x /usr/bin/linuxdeploy

    - name: Build Base Python AppImage With Ratarmount Metadata
      run: |
        python3 -m python_appimage build app -l manylinux2014_x86_64 -p 3.9 AppImage/

    - name: Extract AppImage to AppDir for Further Modification
      run: |
        ./ratarmount-x86_64.AppImage --appimage-extract
        mv squashfs-root/ "$appdir"

    - name: Install Ratarmount into AppDir
      run: |
        "$appdir/opt/python3.9/bin/python3.9" -I -m pip install --no-cache-dir ./core
        "$appdir/opt/python3.9/bin/python3.9" -I -m pip install --no-cache-dir .

    - name: Bundle System Dependencies into AppDir
      run: |
        # Note that manylinux2014 already has libsqlite3.so.0 inside /usr/lib.
        cp -a $( repoquery -l fuse-libs | 'grep' 'lib64.*[.]so' ) "$appdir"/usr/lib/
        APPIMAGE_EXTRACT_AND_RUN=1 linuxdeploy --appdir="$appdir" \
            --library=/usr/lib64/libfuse.so.2 \
            --library=/usr/lib64/libulockmgr.so.1 \
            --executable=/usr/bin/fusermount \
            --executable=/usr/bin/ulockmgr_server

    - name: Clean up Unnecessary Files from AppDir
      run: |
        "$appdir/opt/python3.9/bin/python3.9" -s -m pip uninstall -y build setuptools wheel pip
        rm -rf "$appdir/opt/python3.9/lib/python3.9/site-packages/indexed_gzip/tests" \
               "$appdir/opt/python3.9/include" \
               "$appdir/usr/share/tcltk" \
               "$appdir/usr/lib/libtk8.5.so" \
               "$appdir/usr/lib/libtcl8.5.so" \
               "$appdir/opt/python3.9/lib/python3.9/ensurepip" \
               "$appdir/opt/python3.9/lib/python3.9/lib2to3" \
               "$appdir/opt/python3.9/lib/python3.9/tkinter" \
               "$appdir/opt/python3.9/lib/python3.9/unittest"
        find "$appdir" -type d -empty -print0 | xargs -0 rmdir
        find "$appdir" -type d -empty -print0 | xargs -0 rmdir
        find "$appdir" -name '__pycache__' -print0 | xargs -0 rm -r

    - name: Create AppImage from Modified AppDir
      run: |
        APPIMAGE_EXTRACT_AND_RUN=1 ARCH=x86_64 appimagetool --no-appstream "$appbase".App{Dir,Image}

    - uses: actions/upload-artifact@v3
      with:
        name: ratarmount-manylinux2014_x86_64.AppImage
        path: ratarmount-manylinux2014_x86_64.AppImage


  AppImage-Tests:
    runs-on: ${{ matrix.os }}
    needs: [Manylinux-Appimage]

    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: ratarmount-manylinux2014_x86_64.AppImage

    - name: Install AppImage
      run: |
        chmod u+x ratarmount-manylinux2014_x86_64.AppImage
        mv ratarmount-manylinux2014_x86_64.AppImage /usr/local/bin/ratarmount
        echo "/usr/local/bin" >> $GITHUB_PATH

    - name: Install Dependencies
      run: |
        # These are required for creating test files on the fly not for ratarmount!
        sudo apt-get -y install bzip2 pixz zstd unar

    - name: Test Simple Startup
      run: |
        ratarmount --help
        ratarmount --version

    - uses: actions/checkout@v2

    - name: Test Simple Mount
      run: |
        ratarmount tests/single-file.tar mimi
        ls -la mimi
        sleep 1s
        ratarmount -u mimi

    - name: Regression Tests
      run: |
        export RATARMOUNT_CMD=/usr/local/bin/ratarmount
        bash tests/runtests.sh
